For this project:

## Initialisation:

    -npm i
    -npm run dev 
    -acces by port 3000 on localhost
    
## Description

- This application is an interactive task list built with Next.js. It allows users to:
  - Add tasks with a title and description.
  - Display a list of tasks.
  - Delete tasks.


## Project Structure :
├── db_sql/
│   └── db.sqlite         # Base de données SQLite
├── src/
│   ├── app/
│   │   ├── layout.tsx    # Layout global
│   │   ├── page.tsx      # Page principale affichant la liste des tâches
│   │   ├── global.css    # Styles globaux
│   │   ├── api/
│   │   │   └── routes/
│   │   │       └── route.ts # API pour les opérations GET et POST
│   ├── pages/
│   │   └── addTask.tsx   # Page pour ajouter une nouvelle tâche
│   ├── component/
│   │   └── TaskList.tsx  # Composant pour afficher et gérer la liste des tâches
│   ├── types/
│   │   └── types.ts      # Types TypeScript pour les données
│   └── db.ts             # Connexion à la base de données

## Technical Stack

- **Next.js**: A React framework for page management and server-side rendering.
- **SQLite**: A database for storing tasks.
- **TypeScript**: A superset of JavaScript for improved code safety and readability.
- **Tailwind CSS**: A CSS framework for quick and efficient styling.

### GET `/api/routes`

- Uses `openDB()` to connect to the SQLite database.
- Retrieves tasks via the SQL query `SELECT * FROM tasks`.

### POST `/api/routes`

- Parses the request body to extract `title` and `description`.
- Inserts a new task into the database using the SQL query `INSERT INTO`.

### DELETE `/api/routes`

- Deletes a specific task using the ID provided as a parameter.
- SQL query: `DELETE FROM tasks WHERE id = ?`.

## Database Configuration

### File: `db_sql/db.sqlite`

- Table `tasks`:
  ```sql
  CREATE TABLE tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT NOT NULL
  );